{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Autoimport missing python libraries. Throughout the development of a python program you continuously need to manage the python import statements either because you need one new object or because you no longer need it. This means that you need to stop writing whatever you were writing, go to the top of the file, create or remove the import statement and then resume coding. This workflow break is annoying and almost always unnecessary. autoimport solves this problem if you execute it whenever you have an import error, for example by configuring your editor to run it when saving the file. Installing \u00b6 pip install autoimport Usage \u00b6 Imagine we've got the following source code: import requests def hello ( names : Tuple [ str ]) -> None : for name in names : print ( f \"Hi { name } !\" ) os . getcwd () It has the following import errors: requests is imported but unused. os and Tuple are needed but not imported. After running autoimport the resulting source code will be: import os from typing import Tuple def hello ( names : Tuple [ str ]) -> None : for name in names : print ( f \"Hi { name } !\" ) os . getcwd () autoimport can be used both as command line tool and as a library. It can be parsed either an array of files and/or a directory. A parsed directory will have autoimport be executed on all recursively found python files in said directory. As a command line tool: $: autoimport file.py $: autoimport dir/ As a library: from autoimport import fix_files fix_files ([ 'file.py' , 'dir/' ]) autoimport will add all dependencies at the top of the file, we suggest using isort and black afterwards to clean the file. Features \u00b6 Add missing imports \u00b6 autoimport matches each of the missing import statements against the following objects: The modules referenced in PYTHONPATH . The typing library objects. The common statements. Where some of the common statements are: * `BeautifulSoup` -> `from bs4 import BeautifulSoup` * `call` -> `from unittest.mock import call` * `CaptureFixture` -> `from _pytest.capture import CaptureFixture` * `CliRunner` -> `from click.testing import CliRunner` * `copyfile` -> `from shutil import copyfile` * `dedent` -> `from textwrap import dedent` * `LocalPath` -> `from py._path.local import LocalPath` * `LogCaptureFixture` -> `from _pytest.logging import LogCaptureFixture` * `Mock` -> `from unittest.mock import Mock` * `patch` -> `from unittest.mock import patch` * `StringIO` -> `from io import StringIO` * `TempdirFactory` -> `from _pytest.tmpdir import TempdirFactory` * `YAMLError` -> `from yaml import YAMLError` The objects of the Python project you are developing, assuming you are executing the program in a directory of the project and you can import it. It may not work if you use pip install -e . Given that you execute autoimport inside a virtualenv where the package is installed with pip install -e . , when there is an import error in a file that is indexed in the package, autoimport won't be able to read the package contents as the import statement will fail. So it's a good idea to run autoimport from a virtualenv that has a stable version of the package we are developing. Remove unused import statements \u00b6 If an object is imported but unused, autoimport will remove the import statement. Moving the imports to the top \u00b6 There are going to be import cases that may not work, if you find one, please open an issue . While we fix it you can write the import statement wherever you are in the file and the next time you run autoimport it will get moved to the top. If you don't want a specific line to go to the top, add the # noqa: autoimport or # fmt: skip at the end. For example: a = 1 from os import getcwd # noqa: autoimport getcwd () Configuration \u00b6 autoimport uses the maison library to discover and read your project-local pyproject.toml file (if it exists). This file can be used to configure autoimport 's behavior: the tool.autoimport.common_statements table in that file can be used to define a custom set of \"common statements\", overriding the default set of common statements mentioned above. For example: # pyproject.toml [tool.autoimport.common_statements] \"np\" = \"import numpy as np\" \"FooBar\" = \"from baz_qux import FooBar\" It is also possible to specify a different path for this config file: $: autoimport --config-file ~/.autoimport.toml file.py If using the --config-file flag to specify a file that is named something other than pyproject.toml , the autoimport settings should not be nested under toplevel tool.autoimport keys. # .autoimport.toml [common_statements] \"np\" = \"import numpy as np\" \"FooBar\" = \"from baz_qux import FooBar\" Furthermore, autoimport supports the use of a global configuration file, located at autoimport/config.toml under the xdg config home folder. For most users, this means that the file ~/.config/autoimport/config.toml , if it exists, will be loaded and used as configuration for autoimport . As before, do not write tool.autoimport at the toplevel; just specify your global autoimport settings directly. The settings defined in the local pyproject.toml file (if found) or in the file specified by the --config-file flag (if given) will override the settings defined in the global autoimport/config.toml file. References \u00b6 As most open sourced programs, autoimport is standing on the shoulders of giants, namely: autoflake Inspiration of autoimport . Also used their code to interact with pyflakes . Click Used to create the command line interface. Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakeheaven Python linter with lots of checks . Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. PDM Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme . Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Yamlfix YAML fixer. Alternatives \u00b6 If you like the idea but not how we solved the problem, take a look at this other solutions: smart-imports Contributing \u00b6 For guidance on setting up a development environment, and how to make a contribution to autoimport , see Contributing to autoimport .","title":"Autoimport"},{"location":"#installing","text":"pip install autoimport","title":"Installing"},{"location":"#usage","text":"Imagine we've got the following source code: import requests def hello ( names : Tuple [ str ]) -> None : for name in names : print ( f \"Hi { name } !\" ) os . getcwd () It has the following import errors: requests is imported but unused. os and Tuple are needed but not imported. After running autoimport the resulting source code will be: import os from typing import Tuple def hello ( names : Tuple [ str ]) -> None : for name in names : print ( f \"Hi { name } !\" ) os . getcwd () autoimport can be used both as command line tool and as a library. It can be parsed either an array of files and/or a directory. A parsed directory will have autoimport be executed on all recursively found python files in said directory. As a command line tool: $: autoimport file.py $: autoimport dir/ As a library: from autoimport import fix_files fix_files ([ 'file.py' , 'dir/' ]) autoimport will add all dependencies at the top of the file, we suggest using isort and black afterwards to clean the file.","title":"Usage"},{"location":"#features","text":"","title":"Features"},{"location":"#add-missing-imports","text":"autoimport matches each of the missing import statements against the following objects: The modules referenced in PYTHONPATH . The typing library objects. The common statements. Where some of the common statements are: * `BeautifulSoup` -> `from bs4 import BeautifulSoup` * `call` -> `from unittest.mock import call` * `CaptureFixture` -> `from _pytest.capture import CaptureFixture` * `CliRunner` -> `from click.testing import CliRunner` * `copyfile` -> `from shutil import copyfile` * `dedent` -> `from textwrap import dedent` * `LocalPath` -> `from py._path.local import LocalPath` * `LogCaptureFixture` -> `from _pytest.logging import LogCaptureFixture` * `Mock` -> `from unittest.mock import Mock` * `patch` -> `from unittest.mock import patch` * `StringIO` -> `from io import StringIO` * `TempdirFactory` -> `from _pytest.tmpdir import TempdirFactory` * `YAMLError` -> `from yaml import YAMLError` The objects of the Python project you are developing, assuming you are executing the program in a directory of the project and you can import it. It may not work if you use pip install -e . Given that you execute autoimport inside a virtualenv where the package is installed with pip install -e . , when there is an import error in a file that is indexed in the package, autoimport won't be able to read the package contents as the import statement will fail. So it's a good idea to run autoimport from a virtualenv that has a stable version of the package we are developing.","title":"Add missing imports"},{"location":"#remove-unused-import-statements","text":"If an object is imported but unused, autoimport will remove the import statement.","title":"Remove unused import statements"},{"location":"#moving-the-imports-to-the-top","text":"There are going to be import cases that may not work, if you find one, please open an issue . While we fix it you can write the import statement wherever you are in the file and the next time you run autoimport it will get moved to the top. If you don't want a specific line to go to the top, add the # noqa: autoimport or # fmt: skip at the end. For example: a = 1 from os import getcwd # noqa: autoimport getcwd ()","title":"Moving the imports to the top"},{"location":"#configuration","text":"autoimport uses the maison library to discover and read your project-local pyproject.toml file (if it exists). This file can be used to configure autoimport 's behavior: the tool.autoimport.common_statements table in that file can be used to define a custom set of \"common statements\", overriding the default set of common statements mentioned above. For example: # pyproject.toml [tool.autoimport.common_statements] \"np\" = \"import numpy as np\" \"FooBar\" = \"from baz_qux import FooBar\" It is also possible to specify a different path for this config file: $: autoimport --config-file ~/.autoimport.toml file.py If using the --config-file flag to specify a file that is named something other than pyproject.toml , the autoimport settings should not be nested under toplevel tool.autoimport keys. # .autoimport.toml [common_statements] \"np\" = \"import numpy as np\" \"FooBar\" = \"from baz_qux import FooBar\" Furthermore, autoimport supports the use of a global configuration file, located at autoimport/config.toml under the xdg config home folder. For most users, this means that the file ~/.config/autoimport/config.toml , if it exists, will be loaded and used as configuration for autoimport . As before, do not write tool.autoimport at the toplevel; just specify your global autoimport settings directly. The settings defined in the local pyproject.toml file (if found) or in the file specified by the --config-file flag (if given) will override the settings defined in the global autoimport/config.toml file.","title":"Configuration"},{"location":"#references","text":"As most open sourced programs, autoimport is standing on the shoulders of giants, namely: autoflake Inspiration of autoimport . Also used their code to interact with pyflakes . Click Used to create the command line interface. Pytest Testing framework, enhanced by the awesome pytest-cases library that made the parametrization of the tests a lovely experience. Mypy Python static type checker. Flakeheaven Python linter with lots of checks . Black Python formatter to keep a nice style without effort. Autoimport Python formatter to automatically fix wrong import statements. isort Python formatter to order the import statements. PDM Command line tool to manage the dependencies. Mkdocs To build this documentation site, with the Material theme . Safety To check the installed dependencies for known security vulnerabilities. Bandit To finds common security issues in Python code. Yamlfix YAML fixer.","title":"References"},{"location":"#alternatives","text":"If you like the idea but not how we solved the problem, take a look at this other solutions: smart-imports","title":"Alternatives"},{"location":"#contributing","text":"For guidance on setting up a development environment, and how to make a contribution to autoimport , see Contributing to autoimport .","title":"Contributing"},{"location":"contributing/","text":"So you've started using autoimport and want to show your gratitude to the project, depending on your programming skills there are different ways to do so. I don't know how to program \u00b6 There are several ways you can contribute: Open an issue if you encounter any bug or to let us know if you want a new feature to be implemented. Spread the word about the program. Review the documentation and try to improve it. I know how to program in Python \u00b6 If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones , check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues , as they are expected to be easier to get into the project. We develop the program with TDD , so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it. We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing: If you want to develop a new feature, explain how you'd like to do it in the related issue. If you don't know how to test your code, do the pull request without the tests and we'll try to do them for you. Issues \u00b6 Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import autoimport.version; print(autoimport.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install autoimport or know it's not relevant to your question or feature request. Pull Requests \u00b6 autoimport is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github. Development facilities \u00b6 To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/autoimport.git cd autoimport Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install autoimport, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: autoimport uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGS='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. We'd love you to contribute to autoimport !","title":"Contributing"},{"location":"contributing/#i-dont-know-how-to-program","text":"There are several ways you can contribute: Open an issue if you encounter any bug or to let us know if you want a new feature to be implemented. Spread the word about the program. Review the documentation and try to improve it.","title":"I don't know how to program"},{"location":"contributing/#i-know-how-to-program-in-python","text":"If you have some python knowledge there are some additional ways to contribute. We've ordered the issues in milestones , check the issues in the smaller one, as it's where we'll be spending most of our efforts. Try the good first issues , as they are expected to be easier to get into the project. We develop the program with TDD , so we expect any contribution to have it's associated tests. We also try to maintain an updated documentation of the project, so think if your contribution needs to update it. We know that the expected code quality is above average. Therefore it might be changeling to get the initial grasp of the project structure, know how to make the tests, update the documentation or use all the project technology stack. but please don't let this fact discourage you from contributing: If you want to develop a new feature, explain how you'd like to do it in the related issue. If you don't know how to test your code, do the pull request without the tests and we'll try to do them for you.","title":"I know how to program in Python"},{"location":"contributing/#issues","text":"Questions, feature requests and bug reports are all welcome as issues. To report a security vulnerability, please see our security policy instead. To make it as simple as possible for us to help you, please include the output of the following call in your issue: python -c \"import autoimport.version; print(autoimport.version.version_info())\" or if you have make installed, you can use make version . Please try to always include the above unless you're unable to install autoimport or know it's not relevant to your question or feature request.","title":"Issues"},{"location":"contributing/#pull-requests","text":"autoimport is released regularly so you should see your improvements release in a matter of days or weeks. Note Unless your change is trivial (typo, docs tweak etc.), please create an issue to discuss the change before creating a pull request. If you're looking for something to get your teeth into, check out the \"help wanted\" label on github.","title":"Pull Requests"},{"location":"contributing/#development-facilities","text":"To make contributing as easy and fast as possible, you'll want to run tests and linting locally. tl;dr : use make format to fix formatting, make to run tests and linting & make docs to build the docs. You'll need to have python 3.6, 3.7, or 3.8, virtualenv, git, and make installed. Clone your fork and go into the repository directory: git clone git@github.com:<your username>/autoimport.git cd autoimport Set up the virtualenv for running tests: virtualenv -p ` which python3.7 ` env source env/bin/activate Install autoimport, dependencies and configure the pre-commits: make install Checkout a new branch and make your changes: git checkout -b my-new-feature-branch Fix formatting and imports: autoimport uses black to enforce formatting and isort to fix imports. make format Run tests and linting: make There are more sub-commands in Makefile like test-code , test-examples , mypy or security which you might want to use, but generally make should be all you need. If you need to pass specific arguments to pytest use the ARGS variable, for example make test ARGS='-k test_markdownlint_passes' . Build documentation: If you have changed the documentation, make sure it builds the static site. Once built it will serve the documentation at localhost:8000 : make docs Commit, push, and create your pull request. We'd love you to contribute to autoimport !","title":"Development facilities"},{"location":"editor_integration/","text":"For a smoother experience, you can run autoimport automatically each time each time you save your file in your editor or when you run git commit . Vim \u00b6 To integrate autoimport into Vim, I recommend using the ale plugin . If you are new to ALE, check this post . ale is configured to run autoimport automatically by default. pre-commit \u00b6 You can run autoimport before we do a commit using the pre-commit framework. If you don't know how to use it, follow these guidelines . You'll need to add the following lines to your project's .pre-commit-config.yaml file. repos : - repo : https://github.com/lyz-code/autoimport/ rev : master hooks : - id : autoimport","title":"Editor integration"},{"location":"editor_integration/#vim","text":"To integrate autoimport into Vim, I recommend using the ale plugin . If you are new to ALE, check this post . ale is configured to run autoimport automatically by default.","title":"Vim"},{"location":"editor_integration/#pre-commit","text":"You can run autoimport before we do a commit using the pre-commit framework. If you don't know how to use it, follow these guidelines . You'll need to add the following lines to your project's .pre-commit-config.yaml file. repos : - repo : https://github.com/lyz-code/autoimport/ rev : master hooks : - id : autoimport","title":"pre-commit"},{"location":"reference/","text":"autoimport.services \u00b6 Define all the orchestration functionality required by the program to work. Classes and functions that connect the different domain model objects with the adapters and handlers to achieve the program's purpose. fix_code ( original_source_code , config = None ) \u00b6 Fix python source code to correct import statements. It corrects these errors Add missed import statements. Remove unused import statements. Move import statements to the top. Parameters: Name Type Description Default original_source_code str Source code to be corrected. required Returns: Type Description str Corrected source code. Source code in autoimport/services.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def fix_code ( original_source_code : str , config : Optional [ Dict [ str , Any ]] = None ) -> str : \"\"\"Fix python source code to correct import statements. It corrects these errors: * Add missed import statements. * Remove unused import statements. * Move import statements to the top. Args: original_source_code: Source code to be corrected. Returns: Corrected source code. \"\"\" return SourceCode ( original_source_code , config = config ) . fix () fix_files ( files , config = None ) \u00b6 Fix the python source code of a list of files. If the input is taken from stdin, it will output the value to stdout. Parameters: Name Type Description Default files Tuple [ TextIOWrapper , ...] List of files to fix. required Returns: Type Description Optional [ str ] Fixed code retrieved from stdin or None. Source code in autoimport/services.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def fix_files ( files : Tuple [ TextIOWrapper , ... ], config : Optional [ Dict [ str , Any ]] = None ) -> Optional [ str ]: \"\"\"Fix the python source code of a list of files. If the input is taken from stdin, it will output the value to stdout. Args: files: List of files to fix. Returns: Fixed code retrieved from stdin or None. \"\"\" for file_wrapper in files : source = file_wrapper . read () fixed_source = fix_code ( source , config ) if fixed_source == source and file_wrapper . name != \"<stdin>\" : continue try : # Click testing runner doesn't simulate correctly the reading from stdin # instead of setting the name attribute to `<stdin>` it gives an # AttributeError. But when you use it outside testing, no AttributeError # is raised and name has the value <stdin>. So there is no way of testing # this behaviour. if file_wrapper . name == \"<stdin>\" : # pragma no cover output = \"output\" else : output = \"file\" except AttributeError : output = \"output\" if output == \"file\" : file_wrapper . seek ( 0 ) file_wrapper . write ( fixed_source ) file_wrapper . truncate () file_wrapper . close () else : return fixed_source return None autoimport.entrypoints \u00b6 Define the different ways to expose the program functionality. Functions load_logger ( verbose = False ) \u00b6 Configure the Logging logger. Parameters: Name Type Description Default verbose bool Set the logging level to Debug. False Source code in autoimport/entrypoints/__init__.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def load_logger ( verbose : bool = False ) -> None : # pragma no cover \"\"\"Configure the Logging logger. Args: verbose: Set the logging level to Debug. \"\"\" logging . addLevelName ( logging . INFO , \"[ \\033 [36m+ \\033 [0m]\" ) logging . addLevelName ( logging . ERROR , \"[ \\033 [31m+ \\033 [0m]\" ) logging . addLevelName ( logging . DEBUG , \"[ \\033 [32m+ \\033 [0m]\" ) logging . addLevelName ( logging . WARNING , \"[ \\033 [33m+ \\033 [0m]\" ) if verbose : logging . basicConfig ( stream = sys . stderr , level = logging . DEBUG , format = \" %(levelname)s %(message)s \" ) else : logging . basicConfig ( stream = sys . stderr , level = logging . INFO , format = \" %(levelname)s %(message)s \" ) autoimport.version \u00b6 Utilities to retrieve the information of the program version. version_info () \u00b6 Display the version of the program, python and the platform. Source code in autoimport/version.py 12 13 14 15 16 17 18 19 20 21 def version_info () -> str : \"\"\"Display the version of the program, python and the platform.\"\"\" return dedent ( f \"\"\" \\ ------------------------------------------------------------------ autoimport: { __version__ } Python: { sys . version . split ( \" \" , maxsplit = 1 )[ 0 ] } Platform: { platform . platform () } ------------------------------------------------------------------\"\"\" )","title":"Reference"},{"location":"reference/#autoimport.services","text":"Define all the orchestration functionality required by the program to work. Classes and functions that connect the different domain model objects with the adapters and handlers to achieve the program's purpose.","title":"services"},{"location":"reference/#autoimport.services.fix_code","text":"Fix python source code to correct import statements. It corrects these errors Add missed import statements. Remove unused import statements. Move import statements to the top. Parameters: Name Type Description Default original_source_code str Source code to be corrected. required Returns: Type Description str Corrected source code. Source code in autoimport/services.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 def fix_code ( original_source_code : str , config : Optional [ Dict [ str , Any ]] = None ) -> str : \"\"\"Fix python source code to correct import statements. It corrects these errors: * Add missed import statements. * Remove unused import statements. * Move import statements to the top. Args: original_source_code: Source code to be corrected. Returns: Corrected source code. \"\"\" return SourceCode ( original_source_code , config = config ) . fix ()","title":"fix_code()"},{"location":"reference/#autoimport.services.fix_files","text":"Fix the python source code of a list of files. If the input is taken from stdin, it will output the value to stdout. Parameters: Name Type Description Default files Tuple [ TextIOWrapper , ...] List of files to fix. required Returns: Type Description Optional [ str ] Fixed code retrieved from stdin or None. Source code in autoimport/services.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 def fix_files ( files : Tuple [ TextIOWrapper , ... ], config : Optional [ Dict [ str , Any ]] = None ) -> Optional [ str ]: \"\"\"Fix the python source code of a list of files. If the input is taken from stdin, it will output the value to stdout. Args: files: List of files to fix. Returns: Fixed code retrieved from stdin or None. \"\"\" for file_wrapper in files : source = file_wrapper . read () fixed_source = fix_code ( source , config ) if fixed_source == source and file_wrapper . name != \"<stdin>\" : continue try : # Click testing runner doesn't simulate correctly the reading from stdin # instead of setting the name attribute to `<stdin>` it gives an # AttributeError. But when you use it outside testing, no AttributeError # is raised and name has the value <stdin>. So there is no way of testing # this behaviour. if file_wrapper . name == \"<stdin>\" : # pragma no cover output = \"output\" else : output = \"file\" except AttributeError : output = \"output\" if output == \"file\" : file_wrapper . seek ( 0 ) file_wrapper . write ( fixed_source ) file_wrapper . truncate () file_wrapper . close () else : return fixed_source return None","title":"fix_files()"},{"location":"reference/#autoimport.entrypoints","text":"Define the different ways to expose the program functionality. Functions","title":"entrypoints"},{"location":"reference/#autoimport.entrypoints.load_logger","text":"Configure the Logging logger. Parameters: Name Type Description Default verbose bool Set the logging level to Debug. False Source code in autoimport/entrypoints/__init__.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 def load_logger ( verbose : bool = False ) -> None : # pragma no cover \"\"\"Configure the Logging logger. Args: verbose: Set the logging level to Debug. \"\"\" logging . addLevelName ( logging . INFO , \"[ \\033 [36m+ \\033 [0m]\" ) logging . addLevelName ( logging . ERROR , \"[ \\033 [31m+ \\033 [0m]\" ) logging . addLevelName ( logging . DEBUG , \"[ \\033 [32m+ \\033 [0m]\" ) logging . addLevelName ( logging . WARNING , \"[ \\033 [33m+ \\033 [0m]\" ) if verbose : logging . basicConfig ( stream = sys . stderr , level = logging . DEBUG , format = \" %(levelname)s %(message)s \" ) else : logging . basicConfig ( stream = sys . stderr , level = logging . INFO , format = \" %(levelname)s %(message)s \" )","title":"load_logger()"},{"location":"reference/#autoimport.version","text":"Utilities to retrieve the information of the program version.","title":"version"},{"location":"reference/#autoimport.version.version_info","text":"Display the version of the program, python and the platform. Source code in autoimport/version.py 12 13 14 15 16 17 18 19 20 21 def version_info () -> str : \"\"\"Display the version of the program, python and the platform.\"\"\" return dedent ( f \"\"\" \\ ------------------------------------------------------------------ autoimport: { __version__ } Python: { sys . version . split ( \" \" , maxsplit = 1 )[ 0 ] } Platform: { platform . platform () } ------------------------------------------------------------------\"\"\" )","title":"version_info()"},{"location":"adr/001-high_level_problem_analysis/","text":"","title":"001 high level problem analysis"},{"location":"adr/002-initial_program_design/","text":"","title":"002 initial program design"},{"location":"adr/adr/","text":"ADR are short text documents that captures an important architectural decision made along with its context and consequences. graph TD 001[001: High level analysis] 002[002: Initial Program design] 001 -- Extended --> 002 click 001 \"https://lyz-code.github.io/autoimport/adr/001-high_level_problem_analysis\" _blank click 002 \"https://lyz-code.github.io/autoimport/adr/002-initial_program_design\" _blank 001:::draft 002:::draft classDef draft fill:#CDBFEA; classDef proposed fill:#B1CCE8; classDef accepted fill:#B1E8BA; classDef rejected fill:#E8B1B1; classDef deprecated fill:#E8B1B1; classDef superseeded fill:#E8E5B1;","title":"Adr"}]}